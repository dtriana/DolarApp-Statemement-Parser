name: Version and Release

on:
  push:
    branches: ['main']

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Check out your code with full git history
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup .NET (change version as needed)
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      # Install Versionize tool for semantic versioning and changelog
      - name: Install Versionize
        run: dotnet tool install --global Versionize

      # Configure git user
      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Run Versionize to bump version, update changelog, tag commit
      - name: Versionize Release
        id: versionize
        run: versionize --changelog-all --exit-insignificant-commits
        continue-on-error: true

      # Skip next steps if no version bump is needed
      - name: Skip if No Release Needed
        if: steps.versionize.outcome != 'success'
        run: echo "No release required."

      # Push changes (commits and tags) if a new version was created
      - name: Push changes
        if: steps.versionize.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      # Build the application
      - name: Build
        id: build
        if: steps.versionize.outcome == 'success'
        run: dotnet publish -c Release -r win-x64 -p:PublishSingleFile=true

      # Create a GitHub Release with autogenerated notes if a new version was created
      - name: Create Release
        id: create_release
        if: steps.versionize.outcome == 'success'
        uses: actions/github-script@v5
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          script: |
            const latestTag = (await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            })).data[0].name;
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: latestTag,
              name: latestTag,
              generate_release_notes: true,
              draft: false,
              prerelease: false
            });
      - name: Upload Artifacts
        if: steps.versionize.outcome == 'success' && steps.build.outcome == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/Release/net9.0/win-x64/publish/DolarAppStatementParser.exe
          asset_name: DolarAppStatementParser.exe
          asset_content_type: application/exe   
